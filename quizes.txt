// Angular Nuts & Bolts
1Q:   Angular applications cannot make additional requests to the server, after the initial application loads in the client.
1A:   False.

2Q:   Both directives and controllers have access to $scope.
2A:   True.

3Q:   Angular renders templates on a server like Express , Django, and Rails.
3A:   False.

4Q:   Which of the following are not Angular components: templates, directives, collections or controllers?
4A:   Collections.

5Q:   Angular is super, really, especially easy to learn.
5A:   False.


// Creating a controller
1Q:   A common naming convention for controllers is the controller name, followed by c-t-r-l. For example, "awesomeFeaturesCtrl."
1A:   True.

2Q:   "Injecting" a controller into your application is like saying, __________.
2A:   "Hey, this is where I want my controller to be used.".

3Q:   $scope is like the area of operation for a controller.
3A:   True.

4Q:   Controllers can use functions from sibling $scopes.
4A:   False.

5Q:   Controllers are able to do which of the following:
5A:   Control the state of the application. Handle data. Make changes to the UI.


// Understanding Scope in Angular
1Q:   If a parent scope and a child scope both have a function called "helloWorld" (e.g. $scope.helloWorld is defined in the controller)
1A:   the `helloWorld` function in the child scope will overwrite the `helloWorld` function from the parent scope within the child scope.

2Q:   $scope in Angular is super easy to understand.
2A:   False.

3Q:   Parent $scopes can share functions and values with their children.
3A:   True.

4Q:   Values and functions created on the $rootScope are
4A:   available in all child scopes

5Q:   `ng-click` can only be used on `<button>` or `<a>` tags.
5A:   False.


// ng-model and ng-click
1Q:   Two-way data binding is where application logic and data come together at a single point and are never updated.
1A:   False.

2Q:   The `ng-model` directive is used on which of the following elements:
2A:   <input>

3Q:   Angular is special because of:
3A:   two way data binding.

4Q:   The syntax for injecting the $scope.todo.name variable's value into the body of an html tag is _______. For example, `__________`.
4A:   {{todo.name}}

5Q:   The ng-model directive is set equal to the _______ variable with the same name. For instance, `todo.name` is equal to `________.todo.name`.
5A:   $scope


// ng-repeat, ng-class & ng-blur
1Q:   In the following directive, `<div ng-repeat='foo in foobar">`, foobar is ________.
1A:   An iterable.

2Q:   The JavaScript 'blur' event fires when an input ________.
2A:   Loses focus.

3Q:   Every element of the ng-repeat directive has it's own $scope.
3A:   True.

4Q:   The ng-class directive ________.
4A:   can evaluate functions to apply css classes, can evaluate variables to apply css classes and can apply multiple css classes.

5Q:   In the following directive, `<div ng-repeat="foo in foobar">` you can access "foo" for each element in the iterable however, you cannot access properties of foo. (e.g. `foo.title`, `foo.anyProp`, etc.)
5A:   False.


// What are Services?
1Q:   The pattern of writing functions one after another, for example `foo().bar().hello().goodbye()` is called:
1A:   method chaining.

2Q:   The following are examples of things a service should do:
2A:   Contain data about a logged in user and communicate with a REST API.

3Q:   Within the body of a service's callback function, for example: `...service('someService, function() {
        //inside here!
      })`, the `this` keyword refers to:
3A:   The service itself.

4Q:   A service's methods can be invoked:
4A:   by controllers, by directives and by other services.

5Q:   Services can be used to share data between different controllers.
5A:   True.
